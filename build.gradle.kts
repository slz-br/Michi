import org.jetbrains.kotlin.gradle.dsl.JvmTarget

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

group = "com.github.slz_br"
version = "0.0.1"
description = "Michi, a multipurpose Kotlin Discord bot that uses the JDA API."

val ktorVersion = "2.3.2"

plugins {
    `java-library`
    `maven-publish`
    id("com.github.johnrengelman.shadow") version "8.1.1"
    kotlin("jvm") version "1.9.0"
    kotlin("plugin.serialization") version "1.8.21"
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven("https://repo1.maven.org/maven2/")
    maven("https://m2.dv8tion.net/releases")
    maven("https://repo.maven.apache.org/maven2/")
    maven("https://m2.dv8tion.net/releases")
    maven("https://jitpack.io")
}

dependencies {
    implementation("com.charleskorn.kaml:kaml:0.54.0") // Get the latest version number from https://github.com/charleskorn/kaml/releases/latest
    implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")
    implementation("io.ktor:ktor-serialization-kotlinx-json:$ktorVersion")
    implementation("io.ktor:ktor-client-core:$ktorVersion")
    implementation("io.ktor:ktor-client-cio:$ktorVersion")
    implementation("org.apache.maven.plugins:maven-compiler-plugin:3.11.0")
    implementation("org.apache.maven.plugins:maven-failsafe-plugin:3.0.0")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.22")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.5.0") // get access to kotlin coroutines
    implementation("io.github.cdimascio:dotenv-java:2.3.1") // api to get configs
    implementation("net.dv8tion:JDA:5.0.0-beta.12") // wrapper for discord api
    implementation("com.github.origma:Google-PerspectiveAPI-Java-Client:0.0.5")
    implementation("com.github.walkyst:lavaplayer-fork:1.4.1")
    implementation("ch.qos.logback:logback-classic:1.4.6") // implementation to embellish logs
    testImplementation("org.apache.maven.plugins:maven-surefire-plugin:3.0.0")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5:1.7.20")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.2")

    // PostgresSQL and exposed
    implementation("org.jetbrains.exposed:exposed-core:0.41.1")
    implementation("org.jetbrains.exposed:exposed-dao:0.41.1")
    implementation("org.jetbrains.exposed:exposed-jdbc:0.41.1")
    implementation("org.postgresql:postgresql:42.6.0")

}

tasks.test {
    useJUnitPlatform()
}


tasks.jar {
    manifest {
        attributes(Pair("Main-Class", "michi.bot.MichiLauncherKt"))
    }
}

kotlin.compilerOptions.jvmTarget.value(JvmTarget.JVM_17)
java.sourceCompatibility = JavaVersion.VERSION_17

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc> {
    options.encoding = "UTF-8"
}
